snippet type
	# type: 
	#
snippet type.any
	# type: Any

snippet type.float
	# type: float

snippet type.int
	# type: int

snippet type.bytes
	# type: bytes

snippet type.str
	# type: str

snippet type.bool
	# type: bool

snippet type.tuple
	# type: Tuple[${1:type}]

snippet type.set
	# type: Set[${1:type}]

snippet type.dict
	# type: Dict[${1:type}]

snippet type.list
	# type: List[${1:type}]

snippet type.optional
	# type: Optional[${1:type}]

snippet type.union
	# type: Union[${1:type}]

snippet type.iterable
	# type: Iterable[${1:type}]

snippet type.mapping
	# type: Mapping[${1:key}, ${2:value}]

snippet type.sequence
	# type: Sequence[${1:type}]

snippet type.callble
	# type: Callable[[${1:arg1}, ${2:arg2}], ${3:return}]

snippet type.func
	# type: (${1:arg1}) -> ${2:return}

snippet coding
alias encoding
	# -*- coding: utf-8 -*-

snippet docstring
alias docs
abbr """
	"""
	${0}
	"""

snippet class
	class ${1:name}(${2:object}):

		def __init__(self${3:#:, argument}):
			${0:TARGET}
	
snippet def
alias method
	def ${1:#:name}(${2}):
		${0:TARGET}
	
snippet def.self
alias method
	def ${1:#:name}(self${2:#:, argument}):
		${0:TARGET}
	
snippet def.init
alias init
	def __init__(self${1:#:, argument}):
		${0:TARGET}
	
snippet for
	for ${1:#:value} in ${2:#:iterable}:
		${0:TARGET}
	
snippet if
	if ${1:#:condition}:
		${0:TARGET}
	
snippet if.main
alias main
	if __name__ == '__main__':
		${0:TARGET}
	
snippet elif
	elif ${1:#:condition}:
		${0}
	
snippet else
	else:
		${0}
	
snippet with.open
	with open(${1:#:filename}, '${2:#:mode}') as ${3:f}:
		${0:TARGET}
	
snippet try.except
	try:
		${1:TARGET}
	except ${2:#:ExceptionClass}:
		${3}
	
snippet try.finally
	try:
		${1:TARGET}
	finally:
		${2}
	
snippet while
	while ${1:#:condition}:
		${0:TARGET}
	
snippet with
	with ${1:open}(${2:#:filename, mode}) as ${3:f}:
		${0:TARGET}
	
snippet filter
	[$1 for ${1:x} in ${2:#:list} if ${3:#:condition}]

snippet print
alias pr
	print(${0:TARGET})

snippet get.attr
	getattr({1:#:obj}, {2:#:attr})

snippet set.attr
	setattr({1:#:obj}, {2:#:attr})

snippet pdb
alias pd
	import pdb; pdb.set_trace()

snippet assert.instance
	assert isinstance(${1:#:object}, ${2:#:class})



