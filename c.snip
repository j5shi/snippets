snippet file_descriptor
    /**
    *******************************************************************************
    * @file     $HeadURL: $
    * @version  $LastChangedRevision: $
    * @date     $LastChangedDate: $
    * @author   $Author: $
    *
    * Copyright 2016 Nokia Solutions and Networks. All rights reserved.
    *******************************************************************************/

snippet header_guard
    #ifndef ${1:`toupper(Filename('$1_H', 'UNTITLED_H'))`}
    #define $1

    ${2}

    #endif /* $1 */

snippet include<>
	#include <${1:stdio}.h>${0}

snippet include""
	#include "${1}.h"${0}

snippet def
	#define 

snippet ifndef
	#ifndef $1
		#define ${1:#:SYMBOL}
	#endif${0}

snippet	if
abbr    if () {}
	if (${1:#:condition})
	{
		${0:TARGET}
	}

snippet	else
	else
	{
		${0:TARGET}
	}

snippet elseif
	else if (${1:#:condition})
	{
		${0:TARGET}
	}

snippet ifelse
abbr    if () {} else {}
	if (${1:#:condition})
	{
		${2:TARGET}
	}
	else
	{
		${3}
	}

snippet for
abbr    for () {}
	for (${1:#:type} ${2:#:variable} = 0; $2 < ${3}; $2++)
	{
		${0:TARGET}
	}

snippet while
abbr    while () {}
	while (${1:#:condition})
	{
		${0:TARGET}
	}

snippet do_while
alias   do
abbr    do {} while ()
	do
	{
		${0:TARGET:code}
	} while (${1:#:condition});

snippet switch
abbr    switch () {}
	switch (${1:#:var})
	{
		case ${2:#:val}:
			${0:TARGET}
			break;

		default:
			break;
	}

snippet case
abbr    case:
	case ${1:#:val}:
		${0:TARGET}
		break;

snippet default
abbr    default:
	default:
		${0:TARGET}
		break;


snippet function
abbr    func() {}
	${1:void} ${2:#:func_name}(${3:#:args})
	{
		${0:TARGET}
	}

snippet struct
	struct ${1:#:name}
	{
		${0:TARGET:data}
	};

snippet enum
	enum ${1:#:name}
	{
		${0:TARGET}
	};

snippet typedef_struct 
	typedef struct
	{
		${0:TARGET:data}
	} ${1:#:name};

snippet typedef_enum
	typedef enum
	{
		${0:TARGET:data}
	} ${1:#:name};

snippet main
abbr    main() {}
	int main(int argc, char const* argv[])
	{
		${0:TARGET}
		return 0;
	}

snippet conditional
	(${1:#:condition}) ? ${2:#:a} : ${3:#:b}

snippet typedef
	typedef ${1:#:base_type} ${2:#:custom_type};

snippet printf
abbr    printf("...\n", ...);
	printf("${1}\n", ${2});

snippet fprintf
abbr    fprintf(..., "...\n", ...);
	fprintf(${1:stderr}, "${2}\n"${3});

snippet sizeof
	sizeof(${0:TARGET})

snippet fopen
abbr    fopen("...", "...");
	fopen("${1:PATH}", "${2:MODE}");
	${0:TARGET}
	fclose(${3:FD});

snippet fgets
abbr fgets(row, length, file);
	fgets(${0:ROW}, ${1:LENGTH}, ${2:FILE});

snippet helloworld
	#include <stdio.h>
	
	int main(int argc, char const* argv[])
	{
		puts("hello, world!");
		return 0;
	}
