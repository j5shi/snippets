snippet char
    char ${1:#:var} = '${2:#:value}';

snippet str
alias String
	String ${1:#:var} = "${2:#:value}";

snippet byte
    byte ${1:#:var} = ${2:#:value};

snippet short
    short ${1:#:var} = ${2:#:value};

snippet int
    int ${1:#:var} = ${2:#:value};

snippet long
    long ${1:#:var} = ${2:#:value};

snippet float
    float ${1:#:var} = ${2:#:value};

snippet double
    double ${1:#:var} = ${2:#:value};

snippet bool
    boolean ${1:#:var} = ${2:#:value};

snippet new
    ${1:#:type} ${2:#:var} = new $1;

snippet pr
    private ${1:#:var}

snippet pb
    public ${1:#:var}

snippet st
    static ${1:#:var}

snippet fi
    final ${1:#:var}

snippet va
    void ${1:#:var}

snippet spuf
	static public final ${1:#:type} ${2:#:var} = ${3};

snippet sprf
	static private final ${1:#:type} ${2:#:var} = ${3};

snippet print
	System.out.print(${1:#:content});

snippet println
	System.out.println(${1:#:content});

snippet if
	if (${1:#:condition})
    {
	    ${2:#:statements}
	}

snippet elif
	else if (${1:#:condition})
    {
	    ${2:#:statements}
	}

snippet else
	else
    {
	    ${1:#:statements}
	}

snippet for
	for (${1}; ${2}; ${3})
    {
	    ${4:TARGET}
	}


snippet class
	class ${1} ${2:extends} ${3:#:Parent} ${4:implements} ${5:#:Interface}
    {
	    ${0:TARGET}
	}

snippet interface
	interface ${1} ${2:extends} ${3:#:Parent}
    {
	    ${0:TARGET}
	}

snippet method
	${1:void} ${2:#:method}(${3}) ${4:throws}
    {
	    ${0:TARGET}
	}

snippet enum
abbr enum {}
	enum ${1:#:name}
    {
	    ${0:TARGET}
	}



snippet assert
	assert ${1:#:test} : ${2:#:Failure message};${3}

snippet while
	while (${1}) {
	    ${2:TARGET}
	}


snippet foreach
alias   fore
	for (${1} : ${2}) {
	    ${3:TARGET}
	}

snippet switch
	switch (${1}) {
	    ${2:TARGET}
	}

snippet case
	case ${1}:
	    ${2:TARGET}
	${0}

snippet br
	break;

snippet default
alias   de
	default:
	    ${0}

snippet try
	try {
	    ${0:TARGET}
	} catch (${1:Exception} ${2:e}) {
	    ${3:e.printStackTrace();}
	}

snippet try_resources
	try (${1:#:Resources}) {
	    ${0:TARGET}
	} catch (${2:Exception} ${3:e}) {
	    ${4:e.printStackTrace();}
	}

snippet try_finally
	try {
	    ${0:TARGET}
	} catch (${1:Exception} ${2:e}) {
	    ${3:e.printStackTrace();}
	} finally {
	    ${4}
	}

snippet catch
	catch (${1:Exception} ${2:e}) {
	    ${0:e.printStackTrace();}
	}

snippet finally
	finally {
	    ${0:TARGET}
	}

snippet th
	throw ${0}

snippet sy
	synchronized

snippet testclass
alias   tc
	public class ${1} extends ${2:TestCase} {
	    ${0:TARGET}
	}

snippet test
	public void test${1:#:Name}() throws Exception {
	    ${0:TARGET}
	}

snippet import
alias   imt
	import ${1};
	${0}

snippet j.u
	java.util.

snippet j.i
	java.io.

snippet j.b
	java.beans.

snippet j.n
	java.net

snippet j.m
	java.math.

snippet main
	public static void main(String[] args) {
	    ${0}
	}


#javadoc
snippet comment
	/**
	 * ${0:TARGET}
	 */

snippet author
	@author ${0:$TM_FULLNAME}

snippet {code
	{@code ${0}

snippet deprecated
	@deprecated ${0:#:description}

snippet {docRoot
	{@docRoot

snippet {inheritDoc
	{@inheritDoc

snippet {link
	{@link ${1:#:target} ${0:#:label}

snippet {linkplain
	{@linkplain ${1:#:target} ${0:#:label}

snippet {literal
	{@literal ${0}

snippet param
	@param ${1:#:var} ${0:#:description}

snippet return
	@return ${0:#:description}

snippet see
	@see ${0:#:reference}

snippet serial
	@serial ${0:#:description}

snippet sd
	@serialField ${0:#:description}

snippet sf
	@serialField ${1:#:name} ${2:#:type} ${0:#:description}

snippet since
	@since ${0:#:version}

snippet throws
	@throws ${1:#:class} ${0:#:description}

snippet {value
	{@value ${0}

snippet version
alias ver
	@version ${0:#:version}

snippet     helloworld
options     head
  public class ${1:Hello} {
	static public void main(String args[]) {
	  System.out.println("Hello, world!");
	}
  }
