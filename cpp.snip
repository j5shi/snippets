include c.snip

# #include <...>
snippet include
alias   #inc, #include
	#include <${1:iostream}>${0}

# #include "..."
snippet include2
alias   #inc2, #include2
	#include "${1}"${0}

snippet template
abbr    template <T>
	template<typename ${1:T}>

snippet class
abbr    class {}
	class ${1:#:name} {
		${2}
	public:
		$1(${3});
	};
	$1::$1($3) {
		${0:TARGET}
	}

snippet class-without-constructor
abbr    class {}
	class ${1:#:name} {
		${2}
	};

snippet try
abbr    try catch
	try {
		${1:TARGET}
	} catch (${2:e:xception}) {
		${3}
	}

# range based for ( C++11 feature )
snippet for_CPP11
abbr    for (:) {}
	for (${1:auto&& }${2:var} : ${3:container}) {
		${0:TARGET}
	}

# lambda expression ( C++11 feature )
snippet lambda
abbr    [](){}
	[${1}](${2})${3}{ ${4:TARGET} }

# scoped enumeration ( C++11 feature )
snippet enum_scoped
abbr    enum struct {}
	enum struct { ${1:TARGET} }

# static assert ( C++11 feature )
snippet static_assert
abbr    static_assert(,"")
	static_assert( ${1}, "${2}" );${0}

snippet namespace
abbr    namespace {}
options head
	namespace ${1:#:name} {
		${0:TARGET}
	} // namespace $1

snippet static_cast
abbr    static_cast<>()
	static_cast<${1}>(${2})${0}

snippet reinterpret_cast
abbr    reinterpret_cast<>()
	reinterpret_cast<${1}>(${2})${0}

snippet const_cast
abbr    const_cast<>()
	const_cast<${1}>(${2})${0}

snippet dynamic_cast
abbr    dynamic_cast<>()
	dynamic_cast<${1}>(${2})${0}

snippet helloworld
abbr    #include<iostream> int main...
	#include <iostream>

	int main(int argc, char const* argv[])
	{
		std::cout << "hello, world!" << std::endl;
		return 0;
	}

snippet p
options head
  std::cout << ${0:TARGET} << std::endl;

snippet test_snippet
    /**
    *******************************************************************************
    * @file     $HeadURL: $
    * @version  $LastChangedRevision: 63560 $
    * @date     $LastChangedDate: 2015-09-21 10:12:04 +0800 (Mon, 21 Sep 2015) $
    * @author   $Author: $
    *
    * Copyright 2015 Nokia Solutions and Networks. All rights reserved.
    *******************************************************************************/
    extern "C" {
    #include "UtFakesFor${1:SrcFileUnderTest}.h"

snippet ut_template
    /**
    *******************************************************************************
    * @file     $HeadURL: $
    * @version  $LastChangedRevision: 63560 $
    * @date     $LastChangedDate: 2015-09-21 10:12:04 +0800 (Mon, 21 Sep 2015) $
    * @author   $Author: $
    *
    * Copyright 2015 Nokia Solutions and Networks. All rights reserved.
    *******************************************************************************/
    extern "C" {
    #include "UtFakesForSrcFileUnderTest.h"
    // Here should be placed definitions for custom fakes and global test variables
    }

    /* CppUTest includes should be after your and system includes */
    #include "CppUTest/TestHarness.h"
    #include "CppUTestExt/MockSupport.h"

    TEST_GROUP(UT_SrcFileUnderTest)
    {
        void setup()
        {
            // setup() function is executed  before every test case in given group
            // In this place test environment should be prepared
        }
        void teardown()
        {
            // teardown() function is executed after every test case in given group
            // In this place test environment should be cleared
        }
    };

    TEST(UT_SrcFileUnderTest, FunctionName_TestCaseName)
    {
        // Set inputs
        // Note that output result should be overwritten by unexpected values
        // Call FUT
        // Check outputs
    }

snippet ut_testcase
    TEST(UT_${1:SrcFileUnderTest}, ${2:FunctionName_TestCaseName})
    {
        // Set inputs
        // Note that output result should be overwritten by unexpected values
        // Call FUT
        // Check outputs
    }

